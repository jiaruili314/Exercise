/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

 //递归
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root ==null )
            return false;

        if(root.left == null && root.right == null){
            return sum == root.val;
        }
        
        else return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val );

    }
}

//迭代
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root ==null ){
            return false;
        }
            
        Queue<TreeNode> queNode = new LinkedList<TreeNode>();
        Queue<Integer> queVal = new LinkedList<Integer>();
        queNode.offer(root);
        queVal.offer(root.val);

        while(!queNode.isEmpty()){
            TreeNode now = queNode.poll();
            int temp = queVal.poll();
            if(now.left == null && now.right == null){
                if(temp == sum)
                    return true;
                continue;
            }
                
                
            if(now.left != null){
                queNode.offer(now.left);
                queVal.offer(now.left.val + temp);
            }
            if(now.right != null){
                queNode.offer(now.right);
                queVal.offer(now.right.val + temp);
            }
        }

        return false;

    }
}